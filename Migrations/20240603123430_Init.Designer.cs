// <auto-generated />
using System;
using Core2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core2.Migrations
{
    [DbContext(typeof(ExamContext))]
    [Migration("20240603123430_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.4.24267.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Core2.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetRoles");

                    b.HasIndex(new[] { "Name" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Core2.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUsers");

                    b.HasIndex(new[] { "UserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.HasTrigger("trg_AfterInsertUser");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Core2.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_dbo.AspNetUserClaims");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Core2.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Core2.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Isdeleted")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__51BCD7B7307899E4");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Core2.Models.CartItemId", b =>
                {
                    b.Property<int>("CartItemId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartItemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId1"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Isdeleted")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("Qty")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("CartItemId1")
                        .HasName("PK__CartItem__488B0B0ADB55CCFF");

                    b.HasIndex("CartId");

                    b.HasIndex("ItemId");

                    b.ToTable("CartItemId", (string)null);
                });

            modelBuilder.Entity("Core2.Models.CookingSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SessionDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TranierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("SessionId")
                        .HasName("PK__CookingS__C9F49290CCCB4A7F");

                    b.HasIndex("TranierId");

                    b.ToTable("CookingSession", (string)null);
                });

            modelBuilder.Entity("Core2.Models.CookingSessionAttendee", b =>
                {
                    b.Property<int>("CookingSessionAttendeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CookingSessionAttendeeId"));

                    b.Property<int?>("AttendeeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("CookingSessionAttendeeId")
                        .HasName("PK__CookingS__B4CEC63B5F389DAF");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("SessionId");

                    b.ToTable("CookingSessionAttendee", (string)null);
                });

            modelBuilder.Entity("Core2.Models.DineInTable", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<bool?>("CanBeReserved")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfchairs")
                        .HasColumnType("int")
                        .HasColumnName("NoOFChairs");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("TableId")
                        .HasName("PK__DineInTa__7D5F01EEDBC47714");

                    b.ToTable("DineInTables");
                });

            modelBuilder.Entity("Core2.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<string>("CouponName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxDiscount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("NumberOfTimes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("DiscountId")
                        .HasName("PK__Discount__E43F6D9628D8E1AE");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("Core2.Models.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DishCount")
                        .HasColumnType("int");

                    b.Property<int?>("Isdeleted")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("DishId")
                        .HasName("PK__Dish__18834F506E98DF0A");

                    b.HasIndex("ItemId");

                    b.ToTable("Dish", (string)null);
                });

            modelBuilder.Entity("Core2.Models.DishDatum", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishId"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DishCount")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DishId")
                        .HasName("PK__DishData__18834F50D5E75A1E");

                    b.HasIndex("ItemId");

                    b.ToTable("DishData");
                });

            modelBuilder.Entity("Core2.Models.DishItem", b =>
                {
                    b.Property<int>("DishItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishItemId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DishId")
                        .HasColumnType("int");

                    b.Property<int?>("Isdeleted")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("Qty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("DishItemId")
                        .HasName("PK__DishItem__F0C0B87CF5C9D245");

                    b.HasIndex("DishId");

                    b.HasIndex("ItemId");

                    b.ToTable("DishItem", (string)null);
                });

            modelBuilder.Entity("Core2.Models.DishItemDatum", b =>
                {
                    b.Property<int>("DishItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishItemId"));

                    b.Property<int?>("DishId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("Qty")
                        .HasColumnType("int");

                    b.HasKey("DishItemId")
                        .HasName("PK__DishItem__F0C0B87CC86DA0BE");

                    b.HasIndex("DishId");

                    b.HasIndex("ItemId");

                    b.ToTable("DishItemData");
                });

            modelBuilder.Entity("Core2.Models.Dishtype", b =>
                {
                    b.Property<int>("Dishid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dishid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Dishid"));

                    b.Property<string>("Dishtype1")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("dishtype");

                    b.HasKey("Dishid")
                        .HasName("PK__dishtype__76DEBE3B60BE8D8C");

                    b.ToTable("dishtype", (string)null);
                });

            modelBuilder.Entity("Core2.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Duration")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("QtyOfDishes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EventId")
                        .HasName("PK__Event__7944C8102D0A6DA7");

                    b.HasIndex("UserId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Core2.Models.EventItem", b =>
                {
                    b.Property<int>("EventItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventItemId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("Qty")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("EventItemId")
                        .HasName("PK__EventIte__0369CECFE9E65AE2");

                    b.HasIndex("EventId");

                    b.HasIndex("ItemId");

                    b.ToTable("EventItems");
                });

            modelBuilder.Entity("Core2.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDD6FDB76874");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Core2.Models.FeedbackDoc", b =>
                {
                    b.Property<int>("FeedbackDocsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackDocsId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("FeedbackDocsId")
                        .HasName("PK__Feedback__9DBFC3AAA17C81AA");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackDocs");
                });

            modelBuilder.Entity("Core2.Models.FoodItem", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("foodId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodId"));

                    b.Property<string>("ItemName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("itemName");

                    b.Property<double?>("ItemPrice")
                        .HasColumnType("float")
                        .HasColumnName("itemPrice");

                    b.HasKey("FoodId")
                        .HasName("PK__FoodItem__77EAEA395B9BC284");

                    b.ToTable("FoodItems");
                });

            modelBuilder.Entity("Core2.Models.FoodOrderByTable", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("FoodId")
                        .HasColumnType("int")
                        .HasColumnName("foodId");

                    b.Property<int?>("ItemQuantity")
                        .HasColumnType("int")
                        .HasColumnName("itemQuantity");

                    b.Property<int?>("ReservedTableId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("OrderId")
                        .HasName("PK__FoodOrde__0809335DACC87FFF");

                    b.HasIndex("FoodId");

                    b.HasIndex("ReservedTableId");

                    b.ToTable("FoodOrderByTable", (string)null);
                });

            modelBuilder.Entity("Core2.Models.Holiday", b =>
                {
                    b.Property<int>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("holidayId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HolidayId"));

                    b.Property<string>("HolidayMonthDay")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("holidayMonthDay");

                    b.Property<string>("HolidayName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("holidayName");

                    b.HasKey("HolidayId")
                        .HasName("PK__Holiday__EB855CEFE7675EC2");

                    b.ToTable("Holiday", (string)null);
                });

            modelBuilder.Entity("Core2.Models.Leave", b =>
                {
                    b.Property<int>("LeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EndDuration")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ResponseComment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StartDuration")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LeaveId")
                        .HasName("PK__Leave__796DB959A0962DE0");

                    b.HasIndex("UserId");

                    b.ToTable("Leave", (string)null);
                });

            modelBuilder.Entity("Core2.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<byte[]>("Model")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory", (string)null);
                });

            modelBuilder.Entity("Core2.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfOrder")
                        .HasColumnType("datetime");

                    b.Property<int?>("Isdeleted")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BCF5A31C591");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Core2.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int?>("Isdeleted")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("TaxPercentage")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("OrderItemId")
                        .HasName("PK__OrderIte__57ED06811B2CEABB");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Core2.Models.OrderRefund", b =>
                {
                    b.Property<int>("OrderRefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderRefundId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("OrderRefundId")
                        .HasName("PK__OrderRef__9273F2617E9E0615");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderRefund", (string)null);
                });

            modelBuilder.Entity("Core2.Models.Overtime", b =>
                {
                    b.Property<int>("OvertimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OvertimeId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OvertimeId")
                        .HasName("PK__Overtime__F61430B8D2DBF3BF");

                    b.HasIndex("UserId");

                    b.ToTable("Overtime", (string)null);
                });

            modelBuilder.Entity("Core2.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Isdeleted")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("Threshold")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Visible")
                        .HasColumnType("bit");

                    b.Property<string>("WeightType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProductId")
                        .HasName("PK__Products__B40CC6CD3D85D67B");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Core2.Models.ProductMenu", b =>
                {
                    b.Property<int>("ProductMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("productMenuId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductMenuId"));

                    b.Property<string>("MenuItem1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("menuItem1");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("menuName");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.HasKey("ProductMenuId")
                        .HasName("pk_prodMenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("ProductMenu", (string)null);
                });

            modelBuilder.Entity("Core2.Models.ProductMenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Itemdesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("itemdesc");

                    b.Property<string>("Itemname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("itemname");

                    b.Property<int?>("ProductMenuId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__ProductM__3213E83FC24E50EE");

                    b.HasIndex("ProductMenuId");

                    b.ToTable("ProductMenuItem", (string)null);
                });

            modelBuilder.Entity("Core2.Models.ProductType", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pid"));

                    b.Property<string>("Ptype")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ptype");

                    b.HasKey("Pid")
                        .HasName("PK__productT__DD37D91A38695159");

                    b.ToTable("productType", (string)null);
                });

            modelBuilder.Entity("Core2.Models.ProductsDatum", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("Thresold")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Visible")
                        .HasColumnType("bit")
                        .HasColumnName("visible");

                    b.Property<string>("WeightType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProductId")
                        .HasName("PK__Products__B40CC6CDE23ECE89");

                    b.ToTable("ProductsData");
                });

            modelBuilder.Entity("Core2.Models.ReservedTable", b =>
                {
                    b.Property<int>("ReservedTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservedTableId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FromDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfpeople")
                        .HasColumnType("int")
                        .HasColumnName("NoOFPeople");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReservedTableId")
                        .HasName("PK__Reserved__3E53FB19E8E4D45A");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("ReservedTable", (string)null);
                });

            modelBuilder.Entity("Core2.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId")
                        .HasName("pk_roleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core2.Models.RolesProductMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductMenuId")
                        .HasColumnType("int")
                        .HasColumnName("productMenuId");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.HasKey("Id")
                        .HasName("PK__RolesPro__3213E83FB9C20FD2");

                    b.HasIndex("ProductMenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesProductMenus");
                });

            modelBuilder.Entity("Core2.Models.RolesUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pk_id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RolesUsers");
                });

            modelBuilder.Entity("Core2.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("Qty")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("StockId")
                        .HasName("PK__Stocks__2C83A9C2951272D1");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ItemId");

                    b.HasIndex("VendorId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Core2.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("CratedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fullname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Isdeleted")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4CA77ABD05");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D105348210C26B")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core2.Models.UserType", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("uid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"));

                    b.Property<string>("Uname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("uname");

                    b.HasKey("Uid")
                        .HasName("PK__UserType__DD701264844504C2");

                    b.ToTable("UserType", (string)null);
                });

            modelBuilder.Entity("Core2.Models.UsersDatum", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Email")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Typeid")
                        .HasColumnType("int")
                        .HasColumnName("typeid");

                    b.HasKey("UserId")
                        .HasName("PK__UsersDat__1788CC4C6485F45F");

                    b.HasIndex("Typeid");

                    b.ToTable("UsersData");
                });

            modelBuilder.Entity("Core2.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("VendorAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VendorEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VendorName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("VendorId")
                        .HasName("PK__Vendor__FC8618F36961E784");

                    b.ToTable("Vendor", (string)null);
                });

            modelBuilder.Entity("Core2.Models.VendorProduct", b =>
                {
                    b.Property<int>("VendorProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorProductId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("VendorProductId")
                        .HasName("PK__VendorPr__ABB41163BB377C82");

                    b.HasIndex("ItemId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorProducts");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Core2.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                    b.HasOne("Core2.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");
                });

            modelBuilder.Entity("Core2.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Core2.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core2.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Core2.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core2.Models.Cart", b =>
                {
                    b.HasOne("Core2.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Cart__UserId__36B12243");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core2.Models.CartItemId", b =>
                {
                    b.HasOne("Core2.Models.Cart", "Cart")
                        .WithMany("CartItemIds")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK__CartItemI__CartI__398D8EEE");

                    b.HasOne("Core2.Models.Product", "Item")
                        .WithMany("CartItemIds")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__CartItemI__ItemI__3A81B327");

                    b.Navigation("Cart");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Core2.Models.CookingSession", b =>
                {
                    b.HasOne("Core2.Models.User", "Tranier")
                        .WithMany("CookingSessions")
                        .HasForeignKey("TranierId")
                        .HasConstraintName("FK__CookingSe__Trani__628FA481");

                    b.Navigation("Tranier");
                });

            modelBuilder.Entity("Core2.Models.CookingSessionAttendee", b =>
                {
                    b.HasOne("Core2.Models.User", "Attendee")
                        .WithMany("CookingSessionAttendees")
                        .HasForeignKey("AttendeeId")
                        .HasConstraintName("FK__CookingSe__Atten__66603565");

                    b.HasOne("Core2.Models.CookingSession", "Session")
                        .WithMany("CookingSessionAttendees")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK__CookingSe__Sessi__656C112C");

                    b.Navigation("Attendee");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Core2.Models.Dish", b =>
                {
                    b.HasOne("Core2.Models.Product", "Item")
                        .WithMany("Dishes")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__Dish__ItemID__300424B4");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Core2.Models.DishDatum", b =>
                {
                    b.HasOne("Core2.Models.ProductsDatum", "Item")
                        .WithMany("DishData")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__DishData__ItemId__18EBB532");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Core2.Models.DishItem", b =>
                {
                    b.HasOne("Core2.Models.Dish", "Dish")
                        .WithMany("DishItems")
                        .HasForeignKey("DishId")
                        .HasConstraintName("FK__DishItem__DishId__32E0915F");

                    b.HasOne("Core2.Models.Product", "Item")
                        .WithMany("DishItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__DishItem__ItemID__33D4B598");

                    b.Navigation("Dish");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Core2.Models.DishItemDatum", b =>
                {
                    b.HasOne("Core2.Models.DishDatum", "Dish")
                        .WithMany("DishItemData")
                        .HasForeignKey("DishId")
                        .HasConstraintName("FK__DishItemD__DishI__1BC821DD");

                    b.HasOne("Core2.Models.ProductsDatum", "Item")
                        .WithMany("DishItemData")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__DishItemD__ItemI__1CBC4616");

                    b.Navigation("Dish");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Core2.Models.Event", b =>
                {
                    b.HasOne("Core2.Models.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Event__UserId__2739D489");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core2.Models.EventItem", b =>
                {
                    b.HasOne("Core2.Models.Event", "Event")
                        .WithMany("EventItems")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK__EventItem__Event__59063A47");

                    b.HasOne("Core2.Models.Product", "Item")
                        .WithMany("EventItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__EventItem__ItemI__59FA5E80");

                    b.Navigation("Event");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Core2.Models.Feedback", b =>
                {
                    b.HasOne("Core2.Models.Order", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Feedback__OrderI__412EB0B6");

                    b.HasOne("Core2.Models.OrderItem", "OrderItem")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderItemId")
                        .HasConstraintName("FK__Feedback__OrderI__4222D4EF");

                    b.Navigation("Order");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("Core2.Models.FeedbackDoc", b =>
                {
                    b.HasOne("Core2.Models.Feedback", "Feedback")
                        .WithMany("FeedbackDocs")
                        .HasForeignKey("FeedbackId")
                        .HasConstraintName("FK__FeedbackD__Feedb__44FF419A");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("Core2.Models.FoodOrderByTable", b =>
                {
                    b.HasOne("Core2.Models.FoodItem", "Food")
                        .WithMany("FoodOrderByTables")
                        .HasForeignKey("FoodId")
                        .HasConstraintName("FK__FoodOrder__foodI__719CDDE7");

                    b.HasOne("Core2.Models.ReservedTable", "ReservedTable")
                        .WithMany("FoodOrderByTables")
                        .HasForeignKey("ReservedTableId")
                        .HasConstraintName("FK__FoodOrder__Reser__72910220");

                    b.Navigation("Food");

                    b.Navigation("ReservedTable");
                });

            modelBuilder.Entity("Core2.Models.Leave", b =>
                {
                    b.HasOne("Core2.Models.User", "User")
                        .WithMany("Leaves")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Leave__UserId__4AB81AF0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core2.Models.Order", b =>
                {
                    b.HasOne("Core2.Models.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Orders__Customer__29572725");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Core2.Models.OrderItem", b =>
                {
                    b.HasOne("Core2.Models.Product", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__OrderItem__ItemI__2D27B809");

                    b.HasOne("Core2.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderItem__Order__2C3393D0");

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Core2.Models.OrderRefund", b =>
                {
                    b.HasOne("Core2.Models.Order", "Order")
                        .WithMany("OrderRefunds")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderRefu__Order__3D5E1FD2");

                    b.HasOne("Core2.Models.OrderItem", "OrderItem")
                        .WithMany("OrderRefunds")
                        .HasForeignKey("OrderItemId")
                        .HasConstraintName("FK__OrderRefu__Order__3E52440B");

                    b.Navigation("Order");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("Core2.Models.Overtime", b =>
                {
                    b.HasOne("Core2.Models.User", "User")
                        .WithMany("Overtimes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Overtime__UserId__4D94879B");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core2.Models.ProductMenu", b =>
                {
                    b.HasOne("Core2.Models.Role", "Role")
                        .WithMany("ProductMenus")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__ProductMe__roleI__7F2BE32F");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core2.Models.ProductMenuItem", b =>
                {
                    b.HasOne("Core2.Models.ProductMenu", "ProductMenu")
                        .WithMany("ProductMenuItems")
                        .HasForeignKey("ProductMenuId")
                        .HasConstraintName("FK__ProductMe__Produ__3493CFA7");

                    b.Navigation("ProductMenu");
                });

            modelBuilder.Entity("Core2.Models.ReservedTable", b =>
                {
                    b.HasOne("Core2.Models.DineInTable", "Table")
                        .WithMany("ReservedTables")
                        .HasForeignKey("TableId")
                        .HasConstraintName("FK__ReservedT__Table__5EBF139D");

                    b.HasOne("Core2.Models.User", "User")
                        .WithMany("ReservedTables")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ReservedT__UserI__5FB337D6");

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core2.Models.RolesProductMenu", b =>
                {
                    b.HasOne("Core2.Models.ProductMenu", "ProductMenu")
                        .WithMany("RolesProductMenus")
                        .HasForeignKey("ProductMenuId")
                        .HasConstraintName("FK__RolesProd__produ__45BE5BA9");

                    b.HasOne("Core2.Models.Role", "Role")
                        .WithMany("RolesProductMenus")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__RolesProd__roleI__44CA3770");

                    b.Navigation("ProductMenu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core2.Models.RolesUser", b =>
                {
                    b.HasOne("Core2.Models.Role", "Role")
                        .WithMany("RolesUsers")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__RolesUser__roleI__71D1E811");

                    b.HasOne("Core2.Models.User", "User")
                        .WithMany("RolesUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__RolesUser__userI__72C60C4A");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core2.Models.Stock", b =>
                {
                    b.HasOne("Core2.Models.User", "CreatedByNavigation")
                        .WithMany("Stocks")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Stocks_Users");

                    b.HasOne("Core2.Models.Product", "Item")
                        .WithMany("Stocks")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__Stocks__ItemId__47DBAE45");

                    b.HasOne("Core2.Models.Vendor", "Vendor")
                        .WithMany("Stocks")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK__Stocks__VendorId__6CD828CA");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Item");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Core2.Models.UsersDatum", b =>
                {
                    b.HasOne("Core2.Models.UserType", "TypeNavigation")
                        .WithMany("UsersData")
                        .HasForeignKey("Typeid")
                        .HasConstraintName("FK__UsersData__typei__2180FB33");

                    b.Navigation("TypeNavigation");
                });

            modelBuilder.Entity("Core2.Models.VendorProduct", b =>
                {
                    b.HasOne("Core2.Models.Product", "Item")
                        .WithMany("VendorProducts")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__VendorPro__ItemI__6AEFE058");

                    b.HasOne("Core2.Models.Vendor", "Vendor")
                        .WithMany("VendorProducts")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK__VendorPro__Vendo__5441852A");

                    b.Navigation("Item");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Core2.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");
                });

            modelBuilder.Entity("Core2.Models.Cart", b =>
                {
                    b.Navigation("CartItemIds");
                });

            modelBuilder.Entity("Core2.Models.CookingSession", b =>
                {
                    b.Navigation("CookingSessionAttendees");
                });

            modelBuilder.Entity("Core2.Models.DineInTable", b =>
                {
                    b.Navigation("ReservedTables");
                });

            modelBuilder.Entity("Core2.Models.Dish", b =>
                {
                    b.Navigation("DishItems");
                });

            modelBuilder.Entity("Core2.Models.DishDatum", b =>
                {
                    b.Navigation("DishItemData");
                });

            modelBuilder.Entity("Core2.Models.Event", b =>
                {
                    b.Navigation("EventItems");
                });

            modelBuilder.Entity("Core2.Models.Feedback", b =>
                {
                    b.Navigation("FeedbackDocs");
                });

            modelBuilder.Entity("Core2.Models.FoodItem", b =>
                {
                    b.Navigation("FoodOrderByTables");
                });

            modelBuilder.Entity("Core2.Models.Order", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderRefunds");
                });

            modelBuilder.Entity("Core2.Models.OrderItem", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderRefunds");
                });

            modelBuilder.Entity("Core2.Models.Product", b =>
                {
                    b.Navigation("CartItemIds");

                    b.Navigation("DishItems");

                    b.Navigation("Dishes");

                    b.Navigation("EventItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Stocks");

                    b.Navigation("VendorProducts");
                });

            modelBuilder.Entity("Core2.Models.ProductMenu", b =>
                {
                    b.Navigation("ProductMenuItems");

                    b.Navigation("RolesProductMenus");
                });

            modelBuilder.Entity("Core2.Models.ProductsDatum", b =>
                {
                    b.Navigation("DishData");

                    b.Navigation("DishItemData");
                });

            modelBuilder.Entity("Core2.Models.ReservedTable", b =>
                {
                    b.Navigation("FoodOrderByTables");
                });

            modelBuilder.Entity("Core2.Models.Role", b =>
                {
                    b.Navigation("ProductMenus");

                    b.Navigation("RolesProductMenus");

                    b.Navigation("RolesUsers");
                });

            modelBuilder.Entity("Core2.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CookingSessionAttendees");

                    b.Navigation("CookingSessions");

                    b.Navigation("Events");

                    b.Navigation("Leaves");

                    b.Navigation("Orders");

                    b.Navigation("Overtimes");

                    b.Navigation("ReservedTables");

                    b.Navigation("RolesUsers");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Core2.Models.UserType", b =>
                {
                    b.Navigation("UsersData");
                });

            modelBuilder.Entity("Core2.Models.Vendor", b =>
                {
                    b.Navigation("Stocks");

                    b.Navigation("VendorProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
